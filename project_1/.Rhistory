return(n * p * ( 1 - p));
}
### ==== Calculate individual effect sizes (using logit transformation) and their (individual) sampling variances ==== ###
ies = escalc(xi = unlist(df[,'total_positive']), ni = unlist(df[,'total_samples']),
data = df, measure='PLO')
ies[, "study_weight"] <- map2_dbl(unlist(ies[,"total_samples"]), unlist(df[,"proportion"]),
study_weight);
ggplot(ies, aes(frequency_of_cleaning, proportion, color = surface_cleaning_agent)) +
geom_point(size = 3) +
theme_classic()
df <- df %>% mutate(surface_cleaning_agent = str_to_lower(unlist(df[,'surface_cleaning_agent']))) %>%
mutate(surface_cleaning_agent = str_replace_all(unlist(df[,'surface_cleaning_agent']),
pattern = c("sodium dichlroisocyanurate" = "sodium dichloroisocyanurate")))
n <- nrow(df)
study_weight <- function(n, p){
return(n * p * ( 1 - p));
}
### ==== Calculate individual effect sizes (using logit transformation) and their (individual) sampling variances ==== ###
ies = escalc(xi = unlist(df[,'total_positive']), ni = unlist(df[,'total_samples']),
data = df, measure='PLO')
ies[, "study_weight"] <- map2_dbl(unlist(ies[,"total_samples"]), unlist(df[,"proportion"]),
study_weight);
ggplot(ies, aes(frequency_of_cleaning, proportion, color = surface_cleaning_agent)) +
geom_point(size = 3) +
theme_classic()
replace_na(ies[,"surface_cleaning_agent"], "unspecified")
library(tidyr);
replace_na(ies[,"surface_cleaning_agent"], "unspecified")
df <- replace_na(ies[,"surface_cleaning_agent"], "unspecified")
df <- read_csv("meta_data.csv");
df[, 'study'] <- paste(unlist(df[,"author_first_name"]),
unlist(df[,'author_last_name']))
df <- df %>% mutate(surface_cleaning_agent = str_to_lower(unlist(df[,'surface_cleaning_agent']))) %>%
mutate(surface_cleaning_agent = str_replace_all(unlist(df[,'surface_cleaning_agent']),
pattern = c("sodium dichlroisocyanurate" = "sodium dichloroisocyanurate")))
df <- replace_na(ies[,"surface_cleaning_agent"], "unspecified")
n <- nrow(df)
study_weight <- function(n, p){
return(n * p * ( 1 - p));
}
### ==== Calculate individual effect sizes (using logit transformation) and their (individual) sampling variances ==== ###
ies = escalc(xi = unlist(df[,'total_positive']), ni = unlist(df[,'total_samples']),
data = df, measure='PLO')
ies[, "study_weight"] <- map2_dbl(unlist(ies[,"total_samples"]), unlist(df[,"proportion"]),
study_weight);
setwd("/Users/jaredthacker/COVID-19 Meta");
df <- read_csv("meta_data.csv");
df[, 'study'] <- paste(unlist(df[,"author_first_name"]),
unlist(df[,'author_last_name']))
df <- df %>% mutate(surface_cleaning_agent = str_to_lower(unlist(df[,'surface_cleaning_agent']))) %>%
mutate(surface_cleaning_agent = str_replace_all(unlist(df[,'surface_cleaning_agent']),
pattern = c("sodium dichlroisocyanurate" = "sodium dichloroisocyanurate")))
df[,"surface_cleaning_agent"] <- replace_na(ies[,"surface_cleaning_agent"], "unspecified")
View(df)
n <- nrow(df)
study_weight <- function(n, p){
return(n * p * ( 1 - p));
}
### ==== Calculate individual effect sizes (using logit transformation) and their (individual) sampling variances ==== ###
ies = escalc(xi = unlist(df[,'total_positive']), ni = unlist(df[,'total_samples']),
data = df, measure='PLO')
ies[, "study_weight"] <- map2_dbl(unlist(ies[,"total_samples"]), unlist(df[,"proportion"]),
study_weight);
ggplot(ies, aes(frequency_of_cleaning, proportion, color = surface_cleaning_agent)) +
geom_point(size = 3) +
theme_classic()
ggplot(ies, aes(frequency_of_cleaning, proportion, color = surface_cleaning_agent)) +
geom_point(size = 4, alpha = 1/2) +
theme_classic()
ggplot(ies, aes(frequency_of_cleaning, proportion, color = surface_cleaning_agent)) +
geom_point(size = 4) +
geom_jitter() +
theme_classic()
ggplot(ies, aes(frequency_of_cleaning, proportion, color = surface_cleaning_agent)) +
geom_jitter() +
geom_point(size = 4) +
theme_classic()
ggplot(ies, aes(frequency_of_cleaning, proportion, color = surface_cleaning_agent)) +
geom_point(size = 4) +
geom_jitter() +
theme_classic()
ggplot(ies, aes(frequency_of_cleaning, proportion, color = surface_cleaning_agent)) +
geom_point() +
geom_jitter() +
theme_classic()
ggplot(ies, aes(frequency_of_cleaning, proportion, color = surface_cleaning_agent)) +
geom_jitter() +
theme_classic()
ggplot(ies, aes(frequency_of_cleaning, proportion, color = surface_cleaning_agent)) +
geom_point(position = jitter) +
theme_classic()
jitter <- position_jitter(width = 0.2, height = 0.05);
ggplot(ies, aes(frequency_of_cleaning, proportion, color = surface_cleaning_agent)) +
geom_point(position = jitter) +
theme_classic()
ggplot(ies, aes(frequency_of_cleaning, proportion, color = surface_cleaning_agent)) +
geom_point(position = jitter, size = 4) +
theme_classic()
ggplot(ies, aes(frequency_of_cleaning, proportion, color = surface_cleaning_agent)) +
geom_point(position = jitter, size = 5) +
theme_classic()
ggplot(ies, aes(frequency_of_cleaning, proportion, color = surface_cleaning_agent)) +
geom_point(position = jitter, size = 5) +
labs(x = "Frequency of Cleaning", y = "Proportion", title = "Proportion vs. Frequency of Cleaning")
ggplot(ies, aes(frequency_of_cleaning, proportion, color = surface_cleaning_agent)) +
geom_point(position = jitter, size = 5) +
labs(x = "Frequency of Cleaning", y = "Proportion", title = "Proportion vs. Frequency of Cleaning",
size = "Cleaning Agent") +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5))
ggplot(ies, aes(frequency_of_cleaning, proportion, color = surface_cleaning_agent)) +
geom_point(position = jitter, size = 5) +
labs(x = "Frequency of Cleaning", y = "Proportion", title = "Proportion vs. Frequency of Cleaning",
color = "Cleaning Agent") +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5))
jitter <- position_jitter(width = 0.2, height = 0);
ggplot(ies, aes(frequency_of_cleaning, proportion, color = surface_cleaning_agent)) +
geom_point(position = jitter, size = 5) +
labs(x = "Frequency of Cleaning", y = "Proportion", title = "Proportion vs. Frequency of Cleaning",
color = "Cleaning Agent") +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5))
ggplot(ies, aes(VTM_agent, proportion)) +
geom_bar(stat="summary_bin", fun = mean, fill = "blue") +
labs(x = NULL, y = "Proportion (individual effect)", title = "Proportion vs Country of Origin") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
replace_na(df[,'VTM_agent'], "Unspecified")
replace_na(unlist(df[,'VTM_agent']), "Unspecified")
df[, 'VTM_agent'] <- replace_na(unlist(df[,'VTM_agent']), "Unspecified")
n <- nrow(df)
study_weight <- function(n, p){
return(n * p * ( 1 - p));
}
### ==== Calculate individual effect sizes (using logit transformation) and their (individual) sampling variances ==== ###
ies = escalc(xi = unlist(df[,'total_positive']), ni = unlist(df[,'total_samples']),
data = df, measure='PLO')
ies[, "study_weight"] <- map2_dbl(unlist(ies[,"total_samples"]), unlist(df[,"proportion"]),
study_weight);
ggplot(ies, aes(VTM_agent, proportion)) +
geom_bar(stat="summary_bin", fun = mean, fill = "blue") +
labs(x = NULL, y = "Proportion (individual effect)", title = "Proportion vs Country of Origin") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
ggplot(ies, aes(VTM_agent)) +
geom_bar(stat = "count")
ies %>% group_by(VTM_agent) %>% mutate(mean_prop = mean(proporion))
ies %>% group_by(VTM_agent) %>% mutate(mean_prop = mean(proportion))
vtm_agent_grouped <- ies %>% group_by(VTM_agent) %>% mutate(mean_prop = mean(proportion))
View(vtm_agent_grouped)
vtm_agent_grouped <- ies %>% group_by(VTM_agent) %>% summarise(mean_prop = mean(proportion))
vtm_agent_grouped <- ies %>% group_by(VTM_agent) %>% summarise(mean_prop = mean(proportion),
count_agent = n(VTM_agent))
vtm_agent_grouped <- ies %>% group_by(VTM_agent) %>% summarise(mean_prop = mean(proportion),
vtm_agent_grouped <- ies %>% group_by(VTM_agent) %>% summarise(mean_prop = mean(proportion),
count_agent = n())
ggplot(vtm_agent_grouped, aes(VTM_agent, count_agent)) +
geom_bar(stat = "identity") +
geom_text(aes(label = mean_prop), position = position_dodge)
ggplot(vtm_agent_grouped, aes(VTM_agent, count_agent)) +
geom_bar(stat = "identity") +
geom_text(aes(label = mean_prop), position = position_dodge(0.9))
ggplot(vtm_agent_grouped, aes(VTM_agent, count_agent)) +
geom_bar(stat = "identity") +
geom_text(aes(label = round(mean_prop, digits = 2)), position = position_dodge(0.9))
ggplot(vtm_agent_grouped, aes(VTM_agent, count_agent)) +
geom_bar(stat = "identity") +
geom_text(aes(label = round(mean_prop, digits = 2)), position = position_dodge(1.1))
ggplot(vtm_agent_grouped, aes(VTM_agent, count_agent)) +
geom_bar(stat = "identity") +
geom_text(aes(label = round(mean_prop, digits = 2)), position = position_dodge(-.1))
ggplot(vtm_agent_grouped, aes(VTM_agent, count_agent)) +
geom_bar(stat = "identity") +
geom_text(aes(label = round(mean_prop, digits = 2)), position = position_dodge(0.9))
ggplot(vtm_agent_grouped, aes(VTM_agent, count_agent)) +
geom_bar(stat = "identity") +
geom_text(aes(label = round(mean_prop, digits = 2)), position = position_dodge(0.8))
ggplot(vtm_agent_grouped, aes(VTM_agent, count_agent)) +
geom_bar(stat = "identity") +
geom_text(aes(label = round(mean_prop, digits = 4)), position = position_dodge(0.8))
ggplot(vtm_agent_grouped, aes(VTM_agent, count_agent)) +
geom_bar(stat = "identity") +
geom_text(aes(label = round(mean_prop, digits = 3)), position = position_dodge(0.8))
ggplot(vtm_agent_grouped, aes(VTM_agent, count_agent)) +
geom_bar(stat = "identity") +
geom_text(aes(label = round(mean_prop, digits = 3)), position = position_dodge(0.5))
ggplot(vtm_agent_grouped, aes(VTM_agent, count_agent)) +
geom_bar(stat = "identity", position = "dodge") +
geom_text(aes(label = round(mean_prop, digits = 3)), position = position_dodge(0.5))
ggplot(vtm_agent_grouped, aes(VTM_agent, count_agent)) +
geom_bar(stat = "identity") +
geom_text(aes(label = round(mean_prop, digits = 3)), position = position_dodge(0.5))
ggplot(vtm_agent_grouped, aes(VTM_agent, count_agent)) +
geom_bar(stat = "identity") +
geom_text(aes(label = round(mean_prop, digits = 3)), position = position_dodge(0.5),
vjust = 0)
ggplot(vtm_agent_grouped, aes(VTM_agent, count_agent)) +
geom_bar(stat = "identity") +
geom_text(aes(label = round(mean_prop, digits = 3)), position = position_dodge(0.5),
vjust = 0.1)
ggplot(vtm_agent_grouped, aes(VTM_agent, count_agent)) +
geom_bar(stat = "identity") +
geom_text(aes(label = round(mean_prop, digits = 3)), position = position_dodge(0.5),
vjust = -0.5)
ggplot(vtm_agent_grouped, aes(VTM_agent, count_agent)) +
labs(x = NULL, y = "Frequency of Agent",
title = "Frequency of VTM Agent")
geom_bar(stat = "identity", fill = "blue") +
geom_text(aes(label = round(mean_prop, digits = 3)), position = position_dodge(0.5),
vjust = -0.5)
ggplot(vtm_agent_grouped, aes(VTM_agent, count_agent)) +
labs(x = NULL, y = "Frequency of Agent",
title = "Frequency of VTM Agent")
ggplot(vtm_agent_grouped, aes(VTM_agent, count_agent)) +
labs(x = NULL, y = "Frequency of Agent",
title = "Frequency of VTM Agent") +
geom_bar(stat = "identity", fill = "blue") +
geom_text(aes(label = round(mean_prop, digits = 3)), position = position_dodge(0.5),
vjust = -0.5)
ggplot(vtm_agent_grouped, aes(VTM_agent, count_agent)) +
labs(x = NULL, y = "Frequency of Agent",
title = "Frequency of VTM Agent") +
geom_bar(stat = "identity", fill = "blue") +
geom_text(aes(label = round(mean_prop, digits = 3)), position = position_dodge(0.5),
vjust = -0.5)
ggplot(ies, aes(total_samples, proportion)) +
geom_point()
ggplot(ies, aes(total_samples, proportion)) +
geom_point() +
geom_smooth(method = 'lm', formula = y ~ x)
ggplot(ies, aes(total_samples, proportion)) +
geom_point()
ggplot(ies, aes(swabbing_area, proportion)) +
geom_point()
ggplot(ies, aes(study_duration, proportion)) +
geom_point()
ggplot(ies, aes(e_day_to_acceptance, proportion)) +
geom_point()
ggplot(ies, aes(more_than_one_type_of_patient_room, proportion)) +
geom_bar(stat = "summary_bin", fun = mean)
ggplot(ies, aes(b4_or_aft_cleaning, proportion)) +
geom_bar(stat = "summary_bin", fun = mean)
df %>% mutate(b4_or_aft_cleaning = str_replace_all(unlist(df[,'b4_or_aft_cleaning']),
pattern = c("Both" = "Before/After")))
df <- df %>% mutate(b4_or_aft_cleaning = str_replace_all(unlist(df[,'b4_or_aft_cleaning']),
pattern = c("Both" = "Before/After")))
n <- nrow(df)
study_weight <- function(n, p){
return(n * p * ( 1 - p));
}
### ==== Calculate individual effect sizes (using logit transformation) and their (individual) sampling variances ==== ###
ies = escalc(xi = unlist(df[,'total_positive']), ni = unlist(df[,'total_samples']),
data = df, measure='PLO')
ies[, "study_weight"] <- map2_dbl(unlist(ies[,"total_samples"]), unlist(df[,"proportion"]),
study_weight);
ggplot(ies, aes(b4_or_aft_cleaning, proportion)) +
geom_bar(stat = "summary_bin", fun = mean)
### ==== MODERATOR ANALYSIS - Make plots to visualize relationships, perform meta-regression etc ==== ###
### ==== MODERATOR ANALYSIS PART 1 - Exploratory Data Analysis (EDA) ==== ###
ggplot(ies, aes(country_of_origin, proportion)) +
geom_bar(stat="summary_bin", fun = mean, fill = "blue") +
labs(x = NULL, y = "Proportion (individual effect)", title = "Proportion vs Country of Origin") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
jitter <- position_jitter(width = 0.2, height = 0);
ggplot(ies, aes(frequency_of_cleaning, proportion, color = surface_cleaning_agent)) +
geom_point(position = jitter, size = 5) +
labs(x = "Frequency of Cleaning", y = "Proportion", title = "Proportion vs. Frequency of Cleaning",
color = "Cleaning Agent") +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5))
ggplot(ies, aes(VTM_agent, proportion)) +
geom_bar(stat="summary_bin", fun = mean, fill = "blue") +
labs(x = NULL, y = "Proportion (individual effect)", title = "Proportion vs VTM Agent") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
vtm_agent_grouped <- ies %>% group_by(VTM_agent) %>% summarise(mean_prop = mean(proportion),
count_agent = n())
ggplot(vtm_agent_grouped, aes(VTM_agent, count_agent)) +
labs(x = NULL, y = "Frequency of Agent",
title = "Frequency of VTM Agent") +
geom_bar(stat = "identity", fill = "blue") +
geom_text(aes(label = round(mean_prop, digits = 3)), position = position_dodge(0.5),
vjust = -0.5)
ggplot(vtm_agent_grouped, aes(VTM_agent, count_agent)) +
labs(x = NULL, y = "Frequency of Agent",
title = "Frequency of VTM Agent") +
geom_bar(stat = "identity", fill = "blue") +
geom_text(aes(label = round(mean_prop, digits = 3)), position = position_dodge(0.5),
vjust = -0.5) +
theme_minimal()
ggplot(vtm_agent_grouped, aes(VTM_agent, count_agent)) +
labs(x = NULL, y = "Frequency of Agent",
title = "Frequency of VTM Agent") +
geom_bar(stat = "identity", fill = "blue") +
geom_text(aes(label = round(mean_prop, digits = 3)), position = position_dodge(0.5),
vjust = -0.5) +
theme_minimal() +
theme(plot.titl = element_text(hjust = 0.5))
ggplot(vtm_agent_grouped, aes(VTM_agent, count_agent)) +
labs(x = NULL, y = "Frequency of Agent",
title = "Frequency of VTM Agent") +
geom_bar(stat = "identity", fill = "blue") +
geom_text(aes(label = round(mean_prop, digits = 3)), position = position_dodge(0.5),
vjust = -0.5) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
ggplot(vtm_agent_grouped, aes(VTM_agent, count_agent)) +
labs(x = NULL, y = "Frequency of Agent",
title = "Frequency of VTM Agent and Mean Proportion") +
geom_bar(stat = "identity", fill = "blue") +
geom_text(aes(label = round(mean_prop, digits = 3)), position = position_dodge(0.5),
vjust = -0.5) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
ggplot(vtm_agent_grouped, aes(VTM_agent, count_agent)) +
labs(x = NULL, y = "Frequency of Agent",
title = "Frequency of VTM Agent and Mean Proportion") +
geom_bar(stat = "identity", fill = "blue") +
geom_text(aes(label = round(mean_prop, digits = 3)), position = position_dodge(0.5),
vjust = -0.5) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
pes.logit
pes.logit.summary
library(dmetar)
install.packages("dmetar")
library(dmetar);
version
plot(inf);
### ==== GOSH plot ==== ###
pes.logit.gosh <- gosh(pes.logit)
plot(pes.logit.gosh, alpha = 0.01)
pes.gosh.diag <- gosh.diagnostics(pes.logit.gosh,
km.params = list(centers = 2),
db.params = list(eps = 0.08,
MinPts = 50))
pes.gosh.diag <- metafor::gosh.diagnostics(pes.logit.gosh,
km.params = list(centers = 2),
db.params = list(eps = 0.08,
MinPts = 50))
### ==== Forest plots - visualize heterogeneity === ###
meta::forest(pes.logit.summary, header="Authors and year",
xlim=c(0,1),
rightcols=FALSE,
leftcols=c("studlab", "event", "n", "effect", "ci", "RiskOfBias"),
leftlabs=c("Study", "Cases", "Total", "Proportion", "95% C.I.", "Risk Of Bias"),
xlab="Prevalence of CC", smlab="",
weight.study="random", squaresize=0.5, col.square="navy",
col.square.lines="navy",
col.diamond="maroon", col.diamond.lines="maroon",
pooled.totals=FALSE,
comb.fixed=FALSE,
fs.hetstat=10,
print.tau2=TRUE,
print.Q=TRUE,
print.pval.Q=TRUE,
print.I2=TRUE,
digits=2,
sortvar=1/ies[,'vi']);
### ==== Forest plots - visualize heterogeneity === ###
meta::forest(pes.logit.summary, header="Authors and year",
xlim=c(0,1),
rightcols=FALSE,
leftcols=c("studlab", "event", "n", "effect", "ci", "total_samples"),
leftlabs=c("Study", "Cases", "Total", "Proportion", "95% C.I.", "Risk Of Bias"),
xlab="Prevalence of CC", smlab="",
weight.study="random", squaresize=0.5, col.square="navy",
col.square.lines="navy",
col.diamond="maroon", col.diamond.lines="maroon",
pooled.totals=FALSE,
comb.fixed=FALSE,
fs.hetstat=10,
print.tau2=TRUE,
print.Q=TRUE,
print.pval.Q=TRUE,
print.I2=TRUE,
digits=2,
sortvar=1/ies[,'vi']);
### ==== Forest plots - visualize heterogeneity === ###
meta::forest(pes.logit.summary, header="Authors and year",
xlim=c(0,1),
rightcols=FALSE,
leftcols=c("studlab", "event", "n", "effect", "ci", "country_of_origin"),
leftlabs=c("Study", "Cases", "Total", "Proportion", "95% C.I.", "Risk Of Bias"),
xlab="Prevalence of CC", smlab="",
weight.study="random", squaresize=0.5, col.square="navy",
col.square.lines="navy",
col.diamond="maroon", col.diamond.lines="maroon",
pooled.totals=FALSE,
comb.fixed=FALSE,
fs.hetstat=10,
print.tau2=TRUE,
print.Q=TRUE,
print.pval.Q=TRUE,
print.I2=TRUE,
digits=2,
sortvar=1/ies[,'vi']);
### ==== Forest plots - visualize heterogeneity === ###
meta::forest(pes.logit.summary, header="Authors and year",
xlim=c(0,1),
rightcols=FALSE,
leftcols=c("studlab", "event", "n", "effect", "ci", "country_of_origin"),
leftlabs=c("Study", "Cases", "Total", "Proportion", "95% C.I.", "Country"),
xlab="Prevalence of CC", smlab="",
weight.study="random", squaresize=0.5, col.square="navy",
col.square.lines="navy",
col.diamond="maroon", col.diamond.lines="maroon",
pooled.totals=FALSE,
comb.fixed=FALSE,
fs.hetstat=10,
print.tau2=TRUE,
print.Q=TRUE,
print.pval.Q=TRUE,
print.I2=TRUE,
digits=2,
sortvar=1/ies[,'vi']);
drapery(pes.logit.summary)
drapery(pes.logit.summary,
labels = "studlab",
type = "pval",
legend = FALS)
drapery(pes.logit.summary,
labels = "studlab",
type = "pval",
legend = F)
### ==== ==== ###
update.meta(pes.logit.summary, byvar = "more_than_one_type_of_patient_room",
tau.common = F)
### ==== ==== ###
update.meta(pes.logit.summary, byvar = more_than_one_type_of_patient_room,
tau.common = F)
### ==== ==== ###
update.meta(pes.logit.summary, byvar = more_than_one_type_of_patient_room,
tau.common = T)
### ==== ==== ###
update.meta(pes.logit.summary, byvar = swabbing_procedure_complete,
tau.common = T)
### ==== ==== ###
update.meta(pes.logit.summary, byvar = b4_or_aft_cleaning,
tau.common = T)
### ==== ==== ###
update.meta(pes.logit.summary, byvar = country_of_origin,
tau.common = T)
### ==== ==== ###
update.meta(pes.logit.summary, byvar = PCR_type,
tau.common = T)
### ==== ==== ###
update.meta(pes.logit.summary, byvar = surface_cleaning_agent,
tau.common = T)
### ==== ==== ###
update.meta(pes.logit.summary, byvar = surface_cleaning_agent,
tau.common = T)
### ==== ==== ###
update.meta(pes.logit.summary, byvar = country_of_origin,
tau.common = T)
update.meta(pes.logit.summary, byvar = patient_room_type,
tau.common = T)
update.meta(pes.logit.summary, byvar = VTM_agent,
tau.common = T)
update.meta(pes.logit.summary, byvar = VTM_agent,
tau.common = T)
View(pes.logit.summary)
update.meta(pes.logit.summary, byvar = VTM_agent,
tau.common = T)
update.meta(pes.logit.summary, byvar = VTM_agent,
tau.common = F)
update.meta(pes.logit.summary, byvar = b4_or_aft_cleaning,
tau.common = F)
update.meta(pes.logit.summary, byvar = b4_or_aft_cleaning,
tau.common = T)
### ==== ==== ###
update.meta(pes.logit.summary, byvar = country_of_origin,
tau.common = T)
update.meta(pes.logit.summary, byvar = month_published,
tau.common = T)
### ==== Meta-regression ==== ###
meta.reg.swabbing.area <- metareg(pes.logit.summary, ~swabbing_area)
meta.reg.swabbing.area
ggplo(ies, aes(swabbing_area, proportion)) +
geom_point(color="blue")
ggplot(ies, aes(swabbing_area, proportion)) +
geom_point(color="blue")
ies %>% filter(author_last_name != "Song")
ies_drop_song <- ies %>% filter(author_last_name != "Song")
View(ies_drop_song)
ggplot(ies, aes(swabbing_area, proportion)) +
geom_point(color="blue")
ggplot(ies_drop_song, aes(swabbing_area, proportion)) +
geom_point(color="blue")
ggplot(ies_drop_song, aes(swabbing_area, proportion)) +
geom_point(color="blue")
ies_drop_song <- ies %>% filter(author_last_name != "Wei")
ggplot(ies_drop_song, aes(swabbing_area, proportion)) +
geom_point(color="blue")
meta.reg.swabbing.area.drop.song <- metareg(pes.logit.summary, ~swabbing_area)
meta.reg.swabbing.area.drop.song
pes.logit.summary.drop.song <- metaprop(event = total_positive, n = total_samples, studlab = study, data = ies_drop_song,
sm = 'PLO', method.tau = "REML", method.ci="NAsm", method = "Inverse")
meta.reg.swabbing.area.drop.song <- metareg(pes.logit.summary, ~swabbing_area)
meta.reg.swabbing.area.drop.song
pes.logit.summary.drop.song <- metaprop(event = total_positive, n = total_samples, studlab = study, data = ies_drop_song,
sm = 'PLO', method.tau = "REML", method.ci="NAsm", method = "Inverse")
meta.reg.swabbing.area.drop.song <- metareg(pes.logit.summary.drop.song, ~swabbing_area)
meta.reg.swabbing.area.drop.song
setwd("/Users/jaredthacker/intermediate_python/project_1");
df_neos <- read_csv("neos.csv", col_names = T)
df_neos %>% filter(name = "Lemmon")
df_neos %>% filter(name == "Lemmon")
value <- df_neos %>% filter(name == "Lemmon")
View(value)
